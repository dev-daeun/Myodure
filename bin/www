#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const normalizePort = require('./serverFunc').normalizePort,
      onError = require('./serverFunc').onEror;
      onListening = require('./serverFunc').onListening; 
const debug = require('debug')('good-cats:server');
const http = require('http');


const port = normalizePort(process.env.PORT || '5959');
app.set('port', port);

/**Create HTTP server.*/
const server = http.createServer(app);
      server.listen(port);
      server.on('error', onError);


/* 실시간 메세징 */
const Chat = require('../DAOs/chat');
const Msg = require('../DAOs/message');
const session = require('../libs/redis').getRedisSession();
const Jwt = require('../libs/jwt');
const ChatService = require('../services/chat');

const connect = require('connect');
const moment = require('moment');
const io = require('socket.io')(server); 
      io.on("connection", async client => {

   
        client.on("enterRoom", async roomId => {
            let messages = await Msg.selectAll(3, 1);
                messages.forEach(msg => {
                    msg.sent_time = moment(msg.sent_time).format("YY.MM.DD HH:MM:SS");
                });
            client.emit("enumMessages",  JSON.stringify(messages)); 
        });

        client.on("sendMessage", async (packet) => {
            let sentTime = new Date();
            let senderName = await ChatService.sendMessage(packet.senderId, packet.talkId, packet.content, sentTime);
            packet.sentTime =  moment(sentTime).format("YY.MM.DD HH:MM:SS");
            packet.senderName = senderName;
            client.emit("appendMessage", packet);
        });

      });


