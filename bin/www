#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const normalizePort = require('./serverFunc').normalizePort,
      onError = require('./serverFunc').onEror;
      onListening = require('./serverFunc').onListening; 
const debug = require('debug')('good-cats:server');
const http = require('http');


const port = normalizePort(process.env.PORT || '5959');
app.set('port', port);

/**Create HTTP server.*/
const server = http.createServer(app);
      server.listen(port);
      server.on('error', onError);


/* 실시간 메세징 */
const Chat = require('../DAOs/chat');
const Msg = require('../DAOs/message');
const Jwt = require('../libs/jwt');
const ChatService = require('../services/chat');
const redisCfg = require('../config.json').redis;

const cookieParser = require('socket.io-cookie-parser');
const session = require('express-session');
const moment = require('moment');
const ejs = require('ejs');

const sessionMiddleware = session({
        store: require('../libs/redis').getRedisSession(), // XXX redis server config
        secret: redisCfg.secret,
        saveUninitialized: false,
        resave: false
});

const io = require('socket.io')(server); 

      io.use(cookieParser());
      io.use(function(client, next) {
            sessionMiddleware(client.request, client.request.res, next);
      });
      

      io.on("connection", async client => {
        var user;
        var sid = client.request.session.passport.user;
        var cookie = client.request.cookies.GoodCat;

        if (sid) {
            let decoded = await Jwt.verifyToken(cookie);
            if(parseInt(decoded.data)===sid) user = sid;
            else socket.emit('unauth', "잘못된 쿠키로 접근했습니다."); 
        }
        else socket.emit('unauth', '세션이 만료되었습니다.');

        client.on("enterRoom", async talkId => {
            let messages = await Msg.selectAll(talkId, user);
                messages.forEach(msg => {
                    msg.sent_time = moment(msg.sent_time).format("YY.MM.DD HH:MM:SS");
                    let color;
                    if(msg.sender_id != user) color="#ffffff";
                    else color = "#ffd891"; //본인이면 메세지 창 노란색
                    msg.color = color;
                });
            client.emit("enumMessages",  JSON.stringify(messages)); 
        });

        client.on("sendMessage", async packet => {
            let sentTime = new Date();
            let sender = await ChatService.sendMessage(user, packet.talkId, packet.content, sentTime);
            packet.sentTime =  moment(sentTime).format("YY.MM.DD HH:MM:SS");
            packet.senderName = sender.username;
            let color;
            if(sender.senderId!=user) color="#ffffff";
            else color = "#ffd891"; //본인이면 메세지 창 노란색
            packet.color = color;
            client.emit("appendMessage", packet);
            client.emit("setAlarm", packet.talkId);
        });

        client.on("startChat", userId => {
            ejs.renderFile('views/chat-index.html', (err, view) => {
                if(err) {
                    console.log(err);
                    client.emit("error", err);
                }
                else client.emit("showWindow", view);
            });
        });

        client.on("disconnect", ()=> {
            client.disconnect();
            io.close();
        })
        
      });


